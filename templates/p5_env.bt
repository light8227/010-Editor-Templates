//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: p5_env.bt
//   Authors: TGE, Cherry, Sierra, SecreC
//   Version: 1.1
//   Purpose: Parse Persona 5 ENV files
//  Category:  Persona 5
// File Mask: *.env
//  ID Bytes:
//   History:
//------------------------------------------------

typedef char bool;
typedef char s8;
typedef uchar u8;
typedef int16 s16;
typedef uint16 u16;
typedef int16 s16;
typedef int32 s32;
typedef uint32 u32;
typedef int64 s64;
typedef uint64 u64;
typedef hfloat f16;
typedef float f32;
typedef double f64;

enum<u8> Boolean
{
    False = false,
    True = true,

};
BigEndian();

local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;

uint MyRandom(uint to)
{
    ++__RandomCount;
    __RandomBit = ((__RandomSeed >> 0) ^ (__RandomSeed >> 2) ^ (__RandomSeed >> 3) ^ (__RandomSeed >> 5)) & 1;
    __RandomSeed = ((((__RandomBit << 15) | (__RandomSeed >> 1)) + (0xBABE / __RandomCount)) % to);

    while (__RandomSeed < 0)
        __RandomSeed += to;

    return __RandomSeed;
}

// Environment Structures START!!

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    u32 Magic<name = "File Magic">;
    u32 Version<format = hex, name = "GFS Version">;
    Printf("\nVersion Number: %Lx\n", Version);
    u32 FileType<name = "File Type">;
    u32 Field0C;

} Header;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 FieldModelAmbientRed<name = "Field Model Ambient Red">;
    f32 FieldModelAmbientGreen<name = "Field Model Ambient Green">;
    f32 FieldModelAmbientBlue<name = "Field Model Ambient Blue">;
    f32 FieldModelAmbientAlpha<name = "Field Model Ambient Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 FieldModelDiffuseRed<name = "Field Model Diffuse Red">;
    f32 FieldModelDiffuseGreen<name = "Field Model Diffuse Green">;
    f32 FieldModelDiffuseBlue<name = "Field Model Diffuse Blue">;
    f32 FieldModelDiffuseAlpha<name = "Field Model Diffuse Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 FieldModelSpecularRed<name = "Field Model Specular Red">;
    f32 FieldModelSpecularGreen<name = "Field Model Specular Green">;
    f32 FieldModelSpecularBlue<name = "Field Model Specular Blue">;
    f32 FieldModelSpecularAlpha<name = "Field Model Specular Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 FieldModelEmissiveRed<name = "Field Model Emissive Red">;
    f32 FieldModelEmissiveGreen<name = "Field Model Emissive Green">;
    f32 FieldModelEmissiveBlue<name = "Field Model Emissive Blue">;
    f32 FieldModelEmissiveAlpha<name = "Field Model Emissive Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 Field52;
    f32 Field56;
    f32 Field5A;
    f32 Field5E;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 FieldModelLightX<name = "Field Model Light X">;
    f32 FieldModelLightY<name = "Field Model Light Y">;
    f32 FieldModelLightZ<name = "Field Model Light Z">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    struct FieldModelReserve fieldmodelreserve<name = "Unused Texture Adjustment Section">;
} FieldModelParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 Reserve[47];
} FieldModelReserve;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 CharacterModelAmbientRed<name = "Character Model Ambient Red">;
    f32 CharacterModelAmbientGreen<name = "Character Model Ambient Green">;
    f32 CharacterModelAmbientBlue<name = "Character Model Ambient Blue">;
    f32 CharacterModelAmbientAlpha<name = "Character Model Ambient Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 CharacterModelDiffuseRed<name = "Character Model Diffuse Red">;
    f32 CharacterModelDiffuseGreen<name = "Character Model Diffuse Green">;
    f32 CharacterModelDiffuseBlue<name = "Character Model Diffuse Blue">;
    f32 CharacterModelDiffuseAlpha<name = "Character Model Diffuse Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 CharacterModelSpecularRed<name = "Character Model Specular Red">;
    f32 CharacterModelSpecularGreen<name = "Character Model Specular Green">;
    f32 CharacterModelSpecularBlue<name = "Character Model Specular Blue">;
    f32 CharacterModelSpecularAlpha<name = "Character Model Specular Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 CharacterModelEmissiveRed<name = "Character Model Emissive Red">;
    f32 CharacterModelEmissiveGreen<name = "Character Model Emissive Green">;
    f32 CharacterModelEmissiveBlue<name = "Character Model Emissive Blue">;
    f32 CharacterModelEmissiveAlpha<name = "Character Model Emissive Alpha">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 Field16C;
    f32 Field170;
    f32 Field174;
    f32 Field178;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 CharacterModelLightX<name = "Character Model Light X">;
    f32 CharacterModelLightY<name = "Character Model Light Y">;
    f32 CharacterModelLightZ<name = "Character Model Light Z">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 Field188;
    f32 ModelNearClip<name = "Model Near Clip">;
    f32 ModelFarClip<name = "Model Far Clip">;
} CharModelParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    Boolean EnableFog<name = "Enable Fog">;
    Boolean EnableAmbientFog<name = "Enable Ambient Fog">;
    Boolean DisableFogExceptAmbient<name = "Disable Fog (except Ambient)">;
    Boolean ToggleFogCameraPlaneSetting<name = "Toggle Fog Camera Plane Setting">;
    Printf("Fog: Enabled - %1d | Disabled -%2d\n", EnableFog, ToggleFogCameraPlaneSetting);
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 FogStartDistance<name = "Fog Start Distance">;
    f32 FogEndDistance<name = "Fog End Distance">;
    f32 FogRed<name = "Fog Red">;
    f32 FogGreen<name = "Fog Green">;
    f32 FogBlue<name = "Fog Blue">;
    f32 FogOpacity<name = "Fog Opacity">;
    SetBackColor(MyRandom(0xFFFFFFFF));
    Boolean EnableFloorFog<name = "Enable Floor Fog">;
    Printf("Floor Fog Enabled: %d\n", EnableFloorFog);
    f32 FloorFogStartingHeight<name = "Floor Fog Starting Height (Emanates From)">;
    f32 FloorFogEndingHeight<name = "Floor Fog Ending Height (Emanates To)">;
    f32 FloorFogRed<name = "Floor Fog Red">;
    f32 FloorFogGreen<name = "Floor Fog Green">;
    f32 FloorFogBlue<name = "Floor Fog Blue">;
    f32 FloorFogOpacity<name = "Floor Fog Opacity">;
} FogParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    Boolean EnableHDR<name = "Enable HDR/Graphical Output">;
    Boolean EnableBloom<name = "Enable ToneMap/Bloom">;
    Printf("Display Bloom: %d\n", EnableBloom);
    Boolean EnableGlare<name = "Enable StarFilter/Glare">;
    Printf("Glare Enabled: %d\n", EnableGlare);
    if (header.Version >= 0x1105090)
    {
        if (header.Version == 0x1105090)
        {
            Boolean Field1CC;
            u32 Field1CD;
            u16 Field1D1;
        }
        else
        {
            Boolean Field1CC;
            Boolean Field1CD;
            Boolean Field1CE;
            Boolean Field1CF;
            u32 Field1D0;
        }
        SetBackColor(MyRandom(0xFFFFFFFF));
        f32 BloomAmount<name = "Bloom Amount">;
        f32 BloomDetail<name = "Bloom Detail">;
        f32 BloomWhiteLevel<name = "Bloom White Level?">;
        f32 BloomDarkLevel<name = "Bloom Dark Level?">;
        f32 GlareSensitivity<name = "Glare Sensitivity">;
        if (header.Version == 0x1105090)
        {
            f32 Field1E7;
            f32 Field1EB;
            f32 Field1EF;
            f32 Field1F3;
            f32 Field1F7;
            u32 Field1FB;
            u32 Field1FF;
            u32 Field203;
            f32 Field207;
            f32 Field20B;
            f32 Field20F;
            f32 Field213;
            f32 Field217;
            f32 Field21B;
            f32 Field21F;
            f32 Field223;
            f32 Field227;
            f32 Field22B;
            f32 Field22F;
            f32 Field233;
            f32 GlareLength<name = "Glare Length">;
            f32 GlareChromaticAberration<name = "Glare Chromatic Aberration">;
            f32 GlareDirection<name = "Glare Direction">;
            u32 GlareMode<name = "Glare Mode">;
        }
        else
        {
            f32 SceneWhiteLevels<name = "Scene White Levels">;
            f32 SceneDarkLevels<name = "Scene Dark Levels">;
            f32 Field1F0;
            f32 Field1F4;
            f32 Field1F8;
            u32 Field1FC;
            f32 Field200;
            f32 Field204;
            u32 Field208;
            u32 Field20C;
            f32 Field210;
            f32 Field214;
            f32 RedColourBoost<name = "Red Colour Boost">;
            f32 GreenColourBoost<name = "Green Colour Boost">;
            f32 BlueColourBoost<name = "Blue Colour Boost">;
            f32 Field224;
            f32 Field228;
            f32 Field22C;
            f32 Field230;
            f32 Field234;
            f32 Field238;
            f32 Field23C;
            f32 GlareLength<name = "Glare Length">;
            f32 GlareChromatic<name = "Glare Chromatic Aberration">;
            f32 GlareDirection<name = "Glare Direction">;
            u32 GlareMode<name = "Glare Mode">;
        }
    }
    else
    {
        Boolean Field1CC<name = "Enable AdaptedLumAuto">;
        SetBackColor(MyRandom(0xFFFFFFFF));
        f32 Field1CD<name = "Middle Gray">;
        f32 Field1D1<name = "Bloom Scale">;
        f32 Field1D5<name = "Adapted Lum">;
        f32 Field1D9<name = "Elapsed Time">;
        f32 Field1DD<name = "Star Scale">;
        if (header.Version > 0x1104250)
        {
            f32 Field1E1<name = "Star Length">;
            f32 Field1E5<name = "Star Glare Chromatic Aberration">;
            f32 Field1E9<name = "Star Glare SI">;
            u32 Field1ED<name = "Star Lines">;
        }
    }

} LightingParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 FieldShadowFarClip<name = "Field Shadow Far Clip">;
    f32 Field294;
    f32 AmbientShadowBrightnes<name = "Ambient Shadow Brightnes">;
    f32 Field29C;
    u32 Field2A0;
    f32 FieldShadowNearClip<name = "Field Shadow Near Clip">;
    f32 FieldShadowBrightness<name = "Field Shadow Brightness">;
    Boolean Field2AC;
    Boolean Field2AD;
    Boolean Field2AE;
    Boolean Field2AF;
} ShadowParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 Field217;
    f32 Field21B;
    f32 Field220;
    f32 Field224;
    f32 Field228;
    Boolean Field22B;
} FlaggedSection1;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    Boolean Field248<name = "Display Color Grading">;
    Printf("Color Grading: %d\n", Field248);
    f32 Cyan<name = "Cyan">;
    f32 Magenta<name = "Magenta">;
    f32 Yellow<name = "Yellow">;
    f32 Dodge<name = "Dodge">;
    f32 Burn<name = "Burn">;
} ColorParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    Boolean EnablePhysicsSection<name = "Enable Physics Section">;
    Printf("Bullet Physics Chunk: %d\n", EnablePhysicsSection);
    f32 Gravity;
    Boolean EnableWindEffects<name = "Enable Wind Effects">;
    f32 WindDirectionXRange<name = "Wind Direction X Range">;
    f32 WindDirectionYRange<name = "Wind Direction Y Range">;
    f32 WindDirectionZRange<name = "Wind Direction Z Range">;
    f32 WindStrength<name = "Wind Strength">;
    ;
    f32 WindStrengthModifier<name = "Wind Strength Modifier">;
    f32 WindCycleTime<name = "Wind Cycle Time">;
    f32 WindCycleDelay<name = "Wind Cycle Delay">;
} PhysicsParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    u8 ClearColourRed<name = "Clear Colour Red">;
    u8 ClearColourGreen<name = "Clear Colour Green">;
    u8 ClearColourBlue<name = "Clear Colour Blue">;
    u8 ClearColourAlpha<name = "Clear Colour Alpha">;
} SkyParams;

typedef struct
{
    if (header.Version >= 0x1105090)
    {
        SetBackColor(MyRandom(0xFFFFFFFF));
        Boolean Field250;
        u32 Field251;
        f32 Field255;
        f32 Field259;
        f32 Field25D;
        Boolean EnableDOF;
        f32 DOF_FocalPlane;
        f32 DOF_NearBlurPlane;
        f32 DOF_FarBlurPlane;
        f32 DOF_FarBlurLimit;
        f32 DOF_BlurScale;
        SetBackColor(MyRandom(0xFFFFFFFF));
        u32 DOF_GaussType;
        Boolean EnableSSAO;
        f32 SSAO_OccluderRadius;
        f32 SSAO_FallOffRadius;
        f32 SSAO_BlurScale;
        f32 SSAO_Brightness;
        f32 SSAO_DepthRange;
        SetBackColor(MyRandom(0xFFFFFFFF));
        Boolean Field283<name = "Disable Unknown Flagged Section">;
    }
    else
    {
        SetBackColor(MyRandom(0xFFFFFFFF));
        Boolean Field1F1;
        f32 Field1F2;
        if (header.Version != 0x1104910 && header.Version != 0x1104600 && header.Version != 0x1104250)
        {
            f32 Field1F6;
        }
        else
        {
            u8 Field1F6;
            u8 Field1F7;
            u8 Field1F8;
            u8 Field1F9;
        }
        f32 Field1FA;
        if (header.Version > 0x01105040)
        {
            Boolean EnableDOF;
            f32 DOF_FocalPlane;
            f32 DOF_NearBlurPlane;
            f32 DOF_FarBlurPlane;
        }
        f32 DOF_FarBlurLimit;
        f32 DOF_BlurScale;
        if (header.Version > 0x01105000)
        {
            u32 DOF_GaussType;
        }
        SetBackColor(MyRandom(0xFFFFFFFF));
        Boolean EnableSSAO;
        f32 SSAO_OccluderRadius;
        f32 SSAO_FallOffRadius;
        f32 SSAO_BlurScale;
        f32 SSAO_Brightness;
        f32 SSAO_DepthRange;
        SetBackColor(MyRandom(0xFFFFFFFF));
        Boolean DisableUnknownFlaggedSection<name = "Disable Unknown Flagged Section">;
        if (DisableUnknownFlaggedSection == 0 && header.Version != 0x01105040)
        {
            Printf("Hide Flagged Section: %d\n", Field216);
            struct FlaggedSection1 flagged1<name = "Unknown Flagged Section">;
        }
    }
} UnknownParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 ShadowColourRed<name = "Shadow Colour Red">;
    f32 ShadowColourGreen<name = "Shadow Colour Green">;
    f32 ShadowColourBlue<name = "Shadow Colour Blue">;
    f32 ShadowColourAlpha<name = "Shadow Colour Alpha">;
} UnknownRoyalParams;

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    f32 LightMapR;
    f32 LightMapG;
    f32 LightMapB;
    f32 LightMapA;

    Boolean EnableCharacterOutlines<name = "Enable Character Outlines">;
    f32 OutlineOpacity<name = "Outline Opacity">;
    f32 OutlineWidth<name = "Outline Width">;
    if (header.Version > 0x1104940)
    {
        f32 CharacterOutlineBrightness<name = "CharacterOutlineBrightness">;
    }
    else
    {
        f32 Field27A;
    }
    if (header.Version > 0x1104970)
    {
        f32 Field2F2;
        if (header.Version != 0x1105020 && EnableCharacterOutlines == 1)
        {
            f32 Field2F6;
            f32 ReflectionHeight<name = "Reflection Height">;
        }
    }
    else if (header.Version == 0x1104970)
    {
        f32 Field284;
    }
} UnknownParams2;

//========================================================================
// Main Structure

typedef struct
{
    SetBackColor(MyRandom(0xFFFFFFFF));
    Boolean Field00<hidden = true>;
    Boolean EnableFieldModelSection<name = "Enable Field Model Section">;
    Printf("Field Model Section: %d\n", EnableFieldModelSection);
    if (EnableFieldModelSection == 1)
    {
        struct FieldModelParams fieldparams<name = "Field Model Section">;
    }

    if (header.Version != 0x1104200)
    {
        Boolean Field11A<hidden = true>;
        Boolean EnableCharacterModelSection<name = "Enable Character Model Section">;
        Printf("Character Model Section: %d\n", EnableCharacterModelSection);
        if (EnableCharacterModelSection == 1)
        {
            struct CharModelParams charparams<name = "Character Model Section">;
        }
    }
    else
    {
        f32 Test1;
        f32 Test2<name = "Model Near Clip">;
        f32 Test3<name = "Model Far Clip">;
    }

    struct FogParams fogparams<name = "Fog Section">;
    //=======================================================================
    // ENV Fix for 01005100

    // Mostly a Stop-Gap solution for now until it's fully redone
    //=======================================================================
    if (header.Version >= 0x1105090)
    {
        struct LightingParams lightingparams<name = "Lighting Section">;
        struct UnknownParams unknownparams<name = "Unknown Section">;
        struct ShadowParams shadowparams<name = "Field Shadow Section">;
        struct UnknownRoyalParams unknownroyalparams<name = "Shadow Colour (Royal Only)">;
    }
    else
    {
        struct LightingParams lightingparams<name = "Lighting Section">;
        struct UnknownParams unknownparams<name = "Unknown Section">;
        struct ShadowParams shadowparams<name = "Field Shadow Section">;
    }

    struct ColorParams colorparams<name = "Color Correction Section">;
    //=======================================================================
    // ENV Fix for 01005100

    // Another Stop-Gap solution for only this version
    //=======================================================================

    struct UnknownParams2 unknownparams2<name = "Second Unknown Section">;
    struct PhysicsParams physicsparams<name = "Physics Section">;
    struct SkyParams skyparams<name = "Clear Colour Section">;

    if (header.Version > 0x1104600)
    {
        u32 Field2A4<hidden = true>;
    }

} EnvParams;

// Main Structure End
//=======================================================================

//=======================================================================
// File Start

Printf("\nENV Debug Printer! This means nothing to the end user!\n\n");
Header header<name = "ENV Header">;
EnvParams envparams<name = "ENV Params">;

// File End?
//=======================================================================
